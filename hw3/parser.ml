type token =
  | UNIT
  | NUM of (int)
  | TRUE
  | FALSE
  | ID of (string)
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | LB
  | RB
  | LBLOCK
  | RBLOCK
  | NOT
  | COLONEQ
  | SEMICOLON
  | COMMA
  | PERIOD
  | IF
  | THEN
  | ELSE
  | END
  | WHILE
  | DO
  | LET
  | IN
  | READ
  | WRITE
  | PROC
  | LP
  | RP
  | LC
  | RC
  | EOF

open Parsing;;
let _ = parse_error;;
# 8 "parser.mly"
       
type declLet = Val of string * Hw3.K.exp
             | Fun of string * string list * Hw3.K.exp

exception EmptyBinding
exception ParsingError
let rec desugarLet: declLet * Hw3.K.exp -> Hw3.K.exp  =
  fun (l, e) -> 
  	match l with
		Val(x, e') -> Hw3.K.LETV(x,e',e)
		| Fun(f,x,e') -> Hw3.K.LETF(f,x,e',e)
let rec desugarVars: declLet list -> (Hw3.K.id * Hw3.K.exp) list =
  fun l ->
  	match l with
	  [] -> []
   | a::r -> 
     (match a with
        Val(x, e') -> (x,e')::(desugarVars r)
      | Fun(f,x,e') -> raise ParsingError)

# 62 "parser.ml"
let yytransl_const = [|
  257 (* UNIT *);
  259 (* TRUE *);
  260 (* FALSE *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* STAR *);
  265 (* SLASH *);
  266 (* EQUAL *);
  267 (* LB *);
  268 (* RB *);
  269 (* LBLOCK *);
  270 (* RBLOCK *);
  271 (* NOT *);
  272 (* COLONEQ *);
  273 (* SEMICOLON *);
  274 (* COMMA *);
  275 (* PERIOD *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  279 (* END *);
  280 (* WHILE *);
  281 (* DO *);
  282 (* LET *);
  283 (* IN *);
  284 (* READ *);
  285 (* WRITE *);
  286 (* PROC *);
  287 (* LP *);
  288 (* RP *);
  289 (* LC *);
  290 (* RC *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  258 (* NUM *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\007\000\006\000\
\006\000\005\000\005\000\005\000\003\000\003\000\004\000\004\000\
\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\002\000\001\000\001\000\001\000\002\000\
\001\000\004\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\003\000\002\000\003\000\003\000\006\000\004\000\004\000\
\002\000\002\000\002\000\003\000\005\000\003\000\003\000\001\000\
\003\000\001\000\007\000\007\000\001\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\005\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\025\000\000\000\008\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\033\000\017\000\000\000\016\000\000\000\038\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\046\000\047\000\063\000\027\000\034\000\035\000"

let yysindex = "\014\000\
\069\255\000\000\000\000\000\000\000\000\000\000\249\254\018\255\
\069\255\069\255\069\255\251\254\021\255\069\255\003\255\014\255\
\000\000\137\001\069\255\069\255\000\000\028\255\159\255\058\255\
\017\255\050\255\029\255\000\000\000\000\204\255\000\000\105\255\
\000\000\023\255\040\255\069\255\069\255\069\255\069\255\069\255\
\103\255\069\255\055\255\000\000\204\255\175\255\030\255\069\255\
\069\255\069\255\032\255\069\255\000\000\000\000\056\255\077\255\
\077\255\028\255\028\255\136\255\123\255\136\255\066\255\204\255\
\064\255\069\255\000\000\141\255\204\255\189\255\082\255\189\255\
\000\000\000\000\087\255\000\000\069\255\000\000\069\255\252\254\
\062\255\081\255\000\000\204\255\204\255\072\255\091\255\069\255\
\069\255\189\255\189\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\
\000\000\000\000\075\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\001\071\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\000\
\204\000\088\000\117\000\222\000\146\000\240\000\000\000\042\001\
\030\000\000\000\000\000\000\000\060\001\019\255\000\000\108\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\246\254\000\000\078\001\100\001\000\000\000\000\000\000\
\000\000\092\255\093\255"

let yygindex = "\000\000\
\000\000\002\000\055\000\230\255\000\000\070\000\114\000"

let yytablesize = 668
let yytable = "\025\000\
\009\000\039\000\018\000\003\000\004\000\005\000\006\000\007\000\
\019\000\008\000\022\000\023\000\024\000\075\000\001\000\030\000\
\032\000\009\000\025\000\021\000\045\000\039\000\010\000\020\000\
\026\000\029\000\011\000\086\000\012\000\030\000\013\000\014\000\
\050\000\015\000\031\000\016\000\031\000\056\000\057\000\058\000\
\059\000\060\000\062\000\064\000\081\000\031\000\043\000\033\000\
\083\000\068\000\069\000\070\000\031\000\072\000\051\000\052\000\
\054\000\055\000\019\000\065\000\025\000\067\000\071\000\036\000\
\037\000\038\000\039\000\040\000\041\000\003\000\004\000\005\000\
\006\000\007\000\042\000\008\000\043\000\076\000\084\000\077\000\
\085\000\088\000\049\000\009\000\038\000\039\000\080\000\013\000\
\010\000\090\000\091\000\082\000\011\000\087\000\012\000\043\000\
\013\000\014\000\075\000\015\000\089\000\016\000\037\000\003\000\
\004\000\005\000\006\000\061\000\032\000\008\000\036\000\037\000\
\038\000\039\000\040\000\041\000\014\000\009\000\035\000\036\000\
\078\000\042\000\010\000\043\000\073\000\028\000\011\000\000\000\
\012\000\000\000\013\000\014\000\000\000\015\000\074\000\016\000\
\053\000\000\000\019\000\000\000\075\000\036\000\037\000\038\000\
\039\000\009\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\020\000\043\000\000\000\000\000\042\000\000\000\043\000\
\000\000\000\000\079\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\000\000\000\000\000\000\000\000\011\000\042\000\
\000\000\043\000\000\000\048\000\036\000\037\000\038\000\039\000\
\040\000\041\000\000\000\000\000\000\000\000\000\000\000\042\000\
\066\000\043\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\000\000\000\000\012\000\000\000\042\000\000\000\043\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\020\000\009\000\009\000\000\000\
\000\000\009\000\000\000\009\000\000\000\000\000\000\000\000\000\
\009\000\000\000\009\000\030\000\030\000\030\000\030\000\030\000\
\030\000\021\000\000\000\000\000\000\000\000\000\030\000\030\000\
\030\000\000\000\030\000\030\000\000\000\000\000\030\000\000\000\
\030\000\000\000\000\000\023\000\000\000\030\000\000\000\030\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\000\000\
\000\000\000\000\000\000\019\000\019\000\029\000\000\000\019\000\
\019\000\000\000\000\000\019\000\000\000\019\000\000\000\000\000\
\000\000\000\000\019\000\000\000\019\000\013\000\013\000\013\000\
\013\000\013\000\013\000\022\000\000\000\000\000\000\000\000\000\
\013\000\013\000\000\000\024\000\013\000\013\000\000\000\000\000\
\013\000\000\000\013\000\000\000\000\000\000\000\000\000\013\000\
\000\000\013\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\000\000\000\000\000\000\000\000\014\000\014\000\000\000\
\044\000\014\000\014\000\000\000\000\000\014\000\000\000\014\000\
\000\000\000\000\000\000\000\000\014\000\000\000\014\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\009\000\000\000\009\000\009\000\
\000\000\000\000\009\000\000\000\009\000\000\000\000\000\000\000\
\000\000\009\000\000\000\009\000\011\000\011\000\000\000\000\000\
\011\000\011\000\000\000\000\000\000\000\000\000\000\000\011\000\
\011\000\000\000\000\000\011\000\011\000\000\000\000\000\011\000\
\000\000\011\000\000\000\000\000\000\000\000\000\011\000\000\000\
\011\000\012\000\012\000\000\000\000\000\012\000\012\000\000\000\
\000\000\000\000\000\000\000\000\012\000\012\000\000\000\000\000\
\012\000\012\000\000\000\000\000\012\000\000\000\012\000\015\000\
\015\000\000\000\000\000\012\000\000\000\012\000\015\000\015\000\
\000\000\000\000\015\000\015\000\000\000\000\000\015\000\000\000\
\015\000\018\000\018\000\000\000\000\000\015\000\000\000\015\000\
\018\000\018\000\000\000\000\000\018\000\018\000\000\000\000\000\
\018\000\000\000\018\000\000\000\000\000\000\000\000\000\018\000\
\000\000\018\000\026\000\026\000\000\000\000\000\026\000\026\000\
\000\000\000\000\026\000\000\000\026\000\000\000\000\000\000\000\
\000\000\026\000\000\000\026\000\000\000\020\000\020\000\000\000\
\000\000\020\000\020\000\000\000\000\000\020\000\000\000\020\000\
\000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\000\000\021\000\021\000\000\000\000\000\021\000\021\000\
\000\000\000\000\021\000\000\000\021\000\000\000\000\000\000\000\
\000\000\021\000\000\000\021\000\023\000\023\000\000\000\000\000\
\023\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\000\000\023\000\000\000\023\000\029\000\029\000\
\000\000\000\000\029\000\029\000\000\000\000\000\029\000\000\000\
\029\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\
\000\000\000\000\000\000\000\000\022\000\022\000\000\000\000\000\
\022\000\022\000\000\000\000\000\022\000\024\000\022\000\000\000\
\024\000\024\000\000\000\022\000\024\000\022\000\024\000\000\000\
\000\000\000\000\000\000\024\000\000\000\024\000\036\000\037\000\
\038\000\039\000\040\000\041\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\043\000"

let yycheck = "\005\001\
\000\000\012\001\001\000\001\001\002\001\003\001\004\001\005\001\
\016\001\007\001\009\000\010\000\011\000\018\001\001\000\014\000\
\015\000\015\001\005\001\002\001\019\000\032\001\020\001\031\001\
\030\001\005\001\024\001\032\001\026\001\000\000\028\001\029\001\
\016\001\031\001\032\001\033\001\018\001\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\071\000\027\001\019\001\034\001\
\075\000\048\000\049\000\050\000\034\001\052\000\005\001\027\001\
\034\001\018\001\000\000\005\001\005\001\032\001\031\001\006\001\
\007\001\008\001\009\001\010\001\011\001\001\001\002\001\003\001\
\004\001\005\001\017\001\007\001\019\001\012\001\077\000\016\001\
\079\000\010\001\025\001\015\001\008\001\009\001\005\001\000\000\
\020\001\088\000\089\000\005\001\024\001\032\001\026\001\019\001\
\028\001\029\001\018\001\031\001\010\001\033\001\032\001\001\001\
\002\001\003\001\004\001\005\001\034\001\007\001\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\015\001\027\001\027\001\
\066\000\017\001\020\001\019\001\055\000\012\000\024\001\255\255\
\026\001\255\255\028\001\029\001\255\255\031\001\012\001\033\001\
\032\001\255\255\016\001\255\255\018\001\006\001\007\001\008\001\
\009\001\000\000\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\031\001\019\001\255\255\255\255\017\001\255\255\019\001\
\255\255\255\255\022\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\000\000\017\001\
\255\255\019\001\255\255\021\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\000\000\255\255\017\001\255\255\019\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\019\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\000\000\021\001\022\001\255\255\
\255\255\025\001\255\255\027\001\255\255\255\255\255\255\255\255\
\032\001\255\255\034\001\006\001\007\001\008\001\009\001\010\001\
\011\001\000\000\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\027\001\255\255\255\255\000\000\255\255\032\001\255\255\034\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\000\000\255\255\021\001\
\022\001\255\255\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\255\255\034\001\006\001\007\001\008\001\
\009\001\010\001\011\001\000\000\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\000\000\021\001\022\001\255\255\255\255\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\032\001\
\255\255\034\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\000\000\021\001\022\001\255\255\255\255\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\255\255\034\001\006\001\007\001\255\255\255\255\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\255\255\255\255\021\001\022\001\255\255\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\255\255\032\001\255\255\
\034\001\006\001\007\001\255\255\255\255\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\021\001\022\001\255\255\255\255\025\001\255\255\027\001\010\001\
\011\001\255\255\255\255\032\001\255\255\034\001\017\001\018\001\
\255\255\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\027\001\010\001\011\001\255\255\255\255\032\001\255\255\034\001\
\017\001\018\001\255\255\255\255\021\001\022\001\255\255\255\255\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\032\001\
\255\255\034\001\017\001\018\001\255\255\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\255\255\034\001\255\255\017\001\018\001\255\255\
\255\255\021\001\022\001\255\255\255\255\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\255\255\
\255\255\255\255\017\001\018\001\255\255\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\032\001\255\255\034\001\017\001\018\001\255\255\255\255\
\021\001\022\001\255\255\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\032\001\255\255\034\001\017\001\018\001\
\255\255\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\021\001\022\001\255\255\255\255\025\001\018\001\027\001\255\255\
\021\001\022\001\255\255\032\001\025\001\034\001\027\001\255\255\
\255\255\255\255\255\255\032\001\255\255\034\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\019\001"

let yynames_const = "\
  UNIT\000\
  TRUE\000\
  FALSE\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  LB\000\
  RB\000\
  LBLOCK\000\
  RBLOCK\000\
  NOT\000\
  COLONEQ\000\
  SEMICOLON\000\
  COMMA\000\
  PERIOD\000\
  IF\000\
  THEN\000\
  ELSE\000\
  END\000\
  WHILE\000\
  DO\000\
  LET\000\
  IN\000\
  READ\000\
  WRITE\000\
  PROC\000\
  LP\000\
  RP\000\
  LC\000\
  RC\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                ( _1 )
# 389 "parser.ml"
               : Hw3.K.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                 ( _2 )
# 396 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
        (Hw3.K.UNIT)
# 402 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 64 "parser.mly"
                ( Hw3.K.NUM (-_2) )
# 409 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 65 "parser.mly"
          ( Hw3.K.NUM (_1) )
# 416 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
           ( Hw3.K.TRUE )
# 422 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
            ( Hw3.K.FALSE )
# 428 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
            ( Hw3.K.UNIT )
# 434 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
         ( Hw3.K.VAR (_1) )
# 441 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 70 "parser.mly"
                     ( Hw3.K.CALLV (_1, _3) )
# 449 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                     ( Hw3.K.ADD (_1, _3) )
# 457 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                       (Hw3.K.SUB (_1,_3) )
# 465 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                     ( Hw3.K.MUL (_1,_3) )
# 473 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                      ( Hw3.K.DIV (_1,_3) )
# 481 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                      ( Hw3.K.EQUAL (_1,_3) )
# 489 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    Obj.repr(
# 76 "parser.mly"
                      ( match _1 with Hw3.K.VAR(x) -> Hw3.K.CALLR (x, _3) | _ -> raise ParsingError )
# 497 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 77 "parser.mly"
                 ( match _1 with Hw3.K.VAR(x) -> Hw3.K.CALLR (x, [_3]) | _ -> raise ParsingError )
# 505 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                   ( Hw3.K.LESS (_1,_3) )
# 513 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
               ( Hw3.K.NOT (_2) )
# 520 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                      ( Hw3.K.ASSIGN (_1,_3) )
# 528 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                          ( Hw3.K.SEQ (_1,_3) )
# 536 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                  ( Hw3.K.IF (_2, _4, _6) )
# 545 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                         ( Hw3.K.WHILE (_2, _4) )
# 553 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                       ( desugarLet(_2, _4) )
# 561 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "parser.mly"
              ( Hw3.K.READ (_2) )
# 568 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                 ( Hw3.K.WRITE (_2) )
# 575 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
         ( Hw3.K.RECORD [] )
# 581 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vardecls) in
    Obj.repr(
# 88 "parser.mly"
                  ( Hw3.K.RECORD (desugarVars _2) )
# 588 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                               ( Hw3.K.ASSIGNF (_1,_3,_5) )
# 597 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
                  ( Hw3.K.FIELD (_1,_3) )
# 605 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                         ( Val (_1, _3) )
# 613 "parser.ml"
               : 'vardecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardecl) in
    Obj.repr(
# 94 "parser.mly"
                  ( [_1] )
# 620 "parser.ml"
               : 'vardecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vardecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vardecls) in
    Obj.repr(
# 95 "parser.mly"
                             ( _1::_3 )
# 628 "parser.ml"
               : 'vardecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardecl) in
    Obj.repr(
# 97 "parser.mly"
              ( _1 )
# 635 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                  (Fun (_2, [_4], _7))
# 644 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'vars) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                    (Fun (_2, _4, _7))
# 653 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
            ( [_1] )
# 660 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 102 "parser.mly"
                    ( _1::_3 )
# 668 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                   ( [_1; _3] )
# 676 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 105 "parser.mly"
                 ( _1::_3 )
# 684 "parser.ml"
               : 'vars))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Hw3.K.exp)
;;
