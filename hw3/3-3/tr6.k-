(* bft : tr5 *)
let t6 := leaf (7) in
let t5 := makeLtree (6, t6) in
let t2 := makeLtree (5, t5) in
let t4 := leaf (4) in
let t3 := makeRtree (2, leaf (3)) in
let t1 := makeTree (1, t3, t4) in
let t0 := makeTree (0, t1, t2) in
bft (t0)
;
(* dft : tr4 *)
let t6 := leaf (7) in
let t5 := makeLtree (6, t6) in
let t2 := makeLtree (5, t5) in
let t4 := leaf (4) in
let t3 := makeRtree (2, leaf (3)) in
let t1 := makeTree (1, t3, t4) in
let t0 := makeTree (0, t1, t2) in
dft (t0)
;
(* tr3: makeRtree + rTree + nodeVal *)
let tr := makeRtree (1, (leaf (2))) in
let lf := rTree (tr) in
write ((nodeVal (tr)) + (nodeVal (lf)))
;
(* tr1: leaf + nodeval *)
let lf := leaf (2) in
write (nodeVal (lf))
;
(* tr2: makeLtree + rTree + isEmpty *)
let tr := makeLtree (1, (leaf (2))) in
let lf := rTree(tr) in
if isEmpty(lf) then write (1) else write (0)


